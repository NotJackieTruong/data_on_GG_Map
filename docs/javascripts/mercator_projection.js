// Generated by CoffeeScript 2.4.1
(function() {
  var MercatorProjection;

  MercatorProjection = (function() {
    var TILE_SIZE;

    class MercatorProjection {
      constructor() {
        this.pixelOrigin_ = new google.maps.Point(TILE_SIZE / 2, TILE_SIZE / 2);
        this.pixelsPerLonDegree_ = TILE_SIZE / 360;
        this.pixelsPerLonRadian_ = TILE_SIZE / (2 * Math.PI);
      }

      bound(value, opt_min, opt_max) {
        if (opt_min === !null) {
          value = Math.max(value, opt_min);
        }
        if (opt_max === !null) {
          value = Math.min(value, opt_max);
        }
        return value;
      }

      degreesToRadians(deg) {
        return deg * (Math.PI / 180);
      }

      radiansToDegrees(rad) {
        return rad / (Math.PI / 180);
      }

      fromLatLngToPoint(latLng, opt_point) {
        var origin, point, siny;
        point = opt_point || new google.maps.Point(0, 0);
        origin = this.pixelOrigin_;
        point.x = origin.x + latLng.lng() * this.pixelsPerLonDegree_;
        // NOTE(appleton): Truncating to 0.9999 effectively limits latitude to
        // 89.189.  This is about a third of a tile past the edge of the world
        // tile.
        siny = this.bound(Math.sin(this.degreesToRadians(latLng.lat())), -0.9999, 0.9999);
        point.y = origin.y + 0.5 * Math.log((1 + siny) / (1 - siny)) * -this.pixelsPerLonRadian_;
        return point;
      }

      fromPointToLatLng(point) {
        var lat, latRadians, lng, origin;
        origin = me.pixelOrigin_;
        lng = (point.x - origin.x) / this.pixelsPerLonDegree_;
        latRadians = (point.y - origin.y) / -this.pixelsPerLonRadian_;
        lat = this.radiansToDegrees(2 * Math.atan(Math.exp(latRadians)) - Math.PI / 2);
        return new google.maps.LatLng(lat, lng);
      }

      
      //Google map instance
      //Radius is in meters
      getNewRadius(map, radiusInMeters) {
        var center, endCoord, endPoint, initCoord, initPoint, moved, numTiles, pixelsPerMeter, totalPixelSize;
        numTiles = 1 << map.getZoom();
        center = map.getCenter();
        moved = google.maps.geometry.spherical.computeOffset(center, 10000, 90);
        initCoord = this.fromLatLngToPoint(center);
        endCoord = this.fromLatLngToPoint(moved);
        initPoint = new google.maps.Point(initCoord.x * numTiles, initCoord.y * numTiles);
        endPoint = new google.maps.Point(endCoord.x * numTiles, endCoord.y * numTiles);
        pixelsPerMeter = (Math.abs(initPoint.x - endPoint.x)) / 10000.0;
        totalPixelSize = Math.floor(radiusInMeters * pixelsPerMeter);
        return totalPixelSize;
      }

    };

    TILE_SIZE = 256;

    
    //Export class
    window.MercatorProjection = MercatorProjection;

    return MercatorProjection;

  }).call(this);

}).call(this);
